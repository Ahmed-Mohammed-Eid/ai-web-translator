// Content script for AI Web Translator

// Store original text for each element
const originalTextMap = new Map();
let isTranslating = false;

// Progress indicator functions
function showProgressIndicator() {
	// Remove any existing progress indicators
	removeProgressIndicator();
	
	// Create a new progress indicator
	const progressIndicator = document.createElement('div');
	progressIndicator.id = 'ai-translator-progress';
	progressIndicator.style.cssText = `
		position: fixed;
		top: 20px;
		right: 20px;
		background-color: white;
		border-radius: 8px;
		padding: 15px;
		box-shadow: 0 4px 12px rgba(0,0,0,0.15);
		z-index: 10000;
		font-family: 'Roboto', sans-serif;
		display: flex;
		align-items: center;
	`;
	
	const spinner = document.createElement('div');
	spinner.style.cssText = `
		width: 20px;
		height: 20px;
		border: 2px solid rgba(98, 0, 238, 0.2);
		border-top: 2px solid #6200ee;
		border-radius: 50%;
		margin-right: 10px;
		animation: ai-translator-spin 1s linear infinite;
	`;
	
	const style = document.createElement('style');
	style.textContent = `
		@keyframes ai-translator-spin {
			0% { transform: rotate(0deg); }
			100% { transform: rotate(360deg); }
		}
		
		.ai-translator-text {
			margin: 0.5em 0;
			padding: 0.7em;
			border-radius: 6px;
			background-color: rgba(98, 0, 238, 0.05);
			border-left: 3px solid #6200ee;
			font-family: inherit;
			line-height: 1.5;
			color: #121212;
		}
		
		.ai-translator-text-rtl {
			direction: rtl;
			text-align: right;
		}
		
		.ai-translator-text-ltr {
			direction: ltr;
			text-align: left;
		}
		
		.ai-translator-wrapper {
			border-radius: 6px;
			margin: 0.5em 0;
			padding: 0;
		}
		
		.ai-translator-original {
			opacity: 0.7;
			border-bottom: 1px solid #e0e0e0;
			padding-bottom: 0.5em;
			margin-bottom: 0.5em;
		}
	`;
	
	progressIndicator.appendChild(spinner);
	progressIndicator.appendChild(document.createTextNode('Translating page...'));
	document.head.appendChild(style);
	document.body.appendChild(progressIndicator);
}

function removeProgressIndicator() {
	const progressIndicator = document.getElementById('ai-translator-progress');
	if (progressIndicator) {
		progressIndicator.remove();
	}
}

// Listen for messages from popup or service worker
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
	if (message.action === "translate") {
		// Show progress indicator
		showProgressIndicator();
		
		// Prevent popup closing immediately by sending an acknowledgement
		sendResponse({ received: true });
		
		translatePage(
			message.targetLanguage,
			message.promptTemplate,
			message.displayMode,
			message.textDirection
		)
			.then((result) => {
				// Remove progress indicator
				removeProgressIndicator();
				// Send the result to popup if it's still open
				try {
					chrome.runtime.sendMessage({ 
						action: "translateComplete", 
						result 
					});
				} catch (e) {
					console.log("Popup may be closed, but translation completed successfully");
				}
			})
			.catch((err) => {
				// Remove progress indicator on error
				removeProgressIndicator();
				console.error("Translation error:", err);
				try {
					chrome.runtime.sendMessage({ 
						action: "translateError", 
						error: err.message 
					});
				} catch (e) {
					console.log("Popup may be closed, but there was a translation error");
				}
			});

		return true; // Required for async sendResponse
	}
});

// Main translation function
async function translatePage(targetLanguage, promptTemplate, displayMode, textDirection = 'auto') {
	if (isTranslating) {
		return {
			success: false,
			message: "Translation is already in progress",
		};
	}

	try {
		isTranslating = true;

		// Get API key from background service worker
		const apiKeyResponse = await new Promise((resolve) => {
			chrome.runtime.sendMessage({ action: "getApiKey" }, (response) => {
				resolve(response);
			});
		});

		if (!apiKeyResponse.success) {
			// Create a dialog to inform the user about missing API key
			const dialog = document.createElement("div");
			dialog.style.cssText = `
                position: fixed;
                top: 20%;
                left: 50%;
                transform: translateX(-50%);
                background: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10000;
                max-width: 400px;
                font-family: 'Roboto', sans-serif;
            `;

			dialog.innerHTML = `
                <h3 style="margin-top: 0; color: #6200ee;">API Key Required</h3>
                <p>To use AI Web Translator, you need to add your Google Gemini API key.</p>
                <p>Click the extension icon, then click "Configure API Key" to set up your API key.</p>
                <p><a href="https://ai.google.dev/tutorials/setup" target="_blank" style="color: #6200ee;">Get an API key from Google AI Studio</a></p>
                <button id="close-dialog" style="
                    background: #6200ee;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    cursor: pointer;
                    margin-top: 10px;
                ">Got it</button>
            `;

			document.body.appendChild(dialog);

			document
				.getElementById("close-dialog")
				.addEventListener("click", () => {
					dialog.remove();
				});

			throw new Error(apiKeyResponse.message || "Failed to get API key");
		}

		const apiKey = apiKeyResponse.apiKey;

		// If display mode is original-only, restore original text and exit
		if (displayMode === "original-only") {
			restoreOriginalText();
			return { success: true, message: "Restored original text" };
		}

		// Get all text nodes
		const textElements = getTextElements();
		
		// Prepare content for batch translation
		const textsToTranslate = [];
		const elementMap = new Map(); // Map to store index -> element mapping
		
		// Collect all texts that need translation
		let validElementCount = 0;
		textElements.forEach((element) => {
			const text = element.textContent.trim();
			if (text && text.length >= 5) {
				// Store original text if not already stored
				if (!originalTextMap.has(element)) {
					originalTextMap.set(element, element.innerHTML);
				}
				
				// Add text to the batch with its index
				textsToTranslate.push({
					index: validElementCount,
					text: text
				});
				
				// Map the index to the element
				elementMap.set(validElementCount, element);
				validElementCount++;
			}
		});
		
		// If there are no texts to translate, return early
		if (textsToTranslate.length === 0) {
			return {
				success: true,
				message: "No content to translate"
			};
		}
		
		// Combine all texts with clear separators to send in one request
		const combinedText = textsToTranslate.map(item => 
			`[${item.index}]${item.text}[/${item.index}]`
		).join('\n\n');
		
		// Perform a single translation request for all texts
		const translationsResult = await translateAllWithGemini(
			combinedText,
			targetLanguage,
			promptTemplate,
			apiKey
		);
		
		// Process the translation result and apply to elements
		let processed = 0;
		
		// Parse the returned text to get individual translations
		const translationMap = parseTranslations(translationsResult, textsToTranslate.length);
		
		// Apply translations to the corresponding elements
		translationMap.forEach((translatedText, index) => {
			const element = elementMap.get(Number(index));
			if (element && translatedText) {
				const directionClass = getDirectionClass(textDirection, targetLanguage);
				
				// Apply translation based on display mode with improved styling
				if (displayMode === "replace") {
					element.innerHTML = `<div class="ai-translator-text ${directionClass}">${translatedText}</div>`;
					
					// Set parent element direction if needed
					if (textDirection === 'rtl' || (textDirection === 'auto' && isRtlLanguage(targetLanguage))) {
						element.dir = 'rtl';
					} else if (textDirection === 'ltr') {
						element.dir = 'ltr';
					}
				} else if (displayMode === "add-below") {
					element.innerHTML = `
						<div class="ai-translator-wrapper">
							<div class="ai-translator-original">${originalTextMap.get(element)}</div>
							<div class="ai-translator-text ${directionClass}">${translatedText}</div>
						</div>
					`;
				}
				processed++;
			}
		});

		return {
			success: true,
			message: `Successfully translated ${processed} elements`,
		};
	} catch (err) {
		console.error("Error in translatePage:", err);
		return { success: false, message: err.message };
	} finally {
		isTranslating = false;
	}
}

// Helper function to determine text direction class
function getDirectionClass(textDirection, targetLanguage) {
	if (textDirection === 'rtl' || (textDirection === 'auto' && isRtlLanguage(targetLanguage))) {
		return 'ai-translator-text-rtl';
	} else if (textDirection === 'ltr' || (textDirection === 'auto' && !isRtlLanguage(targetLanguage))) {
		return 'ai-translator-text-ltr';
	}
	return '';
}

// Helper function to check if a language is RTL
function isRtlLanguage(languageCode) {
	const rtlLanguages = ['ar', 'he', 'fa', 'ur', 'yi', 'dv', 'ha', 'ks'];
	return rtlLanguages.includes(languageCode);
}

// Helper function to get text elements
function getTextElements() {
	const elementsToTranslate = [];

	// Define elements that commonly contain translatable text
	const selectors = [
		"p",
		"h1",
		"h2",
		"h3",
		"h4",
		"h5",
		"h6",
		"li",
		"td",
		"th",
		"div:not(:has(*))",
		"span:not(:has(*))",
		"a:not(:has(img))",
	];

	// Query for elements and filter out those with no meaningful text
	document.querySelectorAll(selectors.join(",")).forEach((element) => {
		// Skip hidden elements and those with no text
		if (
			isElementVisible(element) &&
			element.textContent.trim().length > 0
		) {
			elementsToTranslate.push(element);
		}
	});

	return elementsToTranslate;
}

// Helper function to check if an element is visible
function isElementVisible(element) {
	const style = window.getComputedStyle(element);
	return (
		style.display !== "none" &&
		style.visibility !== "hidden" &&
		element.offsetWidth > 0 &&
		element.offsetHeight > 0
	);
}

// Helper function to restore original text
function restoreOriginalText() {
	originalTextMap.forEach((originalHtml, element) => {
		if (element && element.parentNode) {
			// Reset direction attribute
			element.dir = '';
			element.innerHTML = originalHtml;
		}
	});
}

// Function to translate all texts in a single request
async function translateAllWithGemini(
	combinedText,
	targetLanguage,
	promptTemplate,
	apiKey
) {
	// Language map for template substitution
	const languageMap = {
		es: "Spanish",
		fr: "French",
		de: "German",
		it: "Italian",
		pt: "Portuguese",
		ru: "Russian",
		ja: "Japanese",
		ko: "Korean",
		zh: "Chinese",
		ar: "Arabic",
	};

	const languageName = languageMap[targetLanguage] || targetLanguage;
	
	// Create a specialized prompt for batch translation
	const batchPrompt = `
You are a professional translator. Your task is to translate multiple texts from various webpage elements into ${languageName}.

IMPORTANT INSTRUCTIONS:
1. Each text to translate is enclosed in tags like [0]text[/0], [1]text[/1], etc.
2. Preserve these index tags exactly in your response: [0][/0], [1][/1], etc.
3. Only translate the content between the tags, keeping the tags intact.
4. Maintain the original formatting as much as possible.
5. Do not translate proper names, brands, or technical terms unless there's a widely accepted equivalent.
6. Keep your translations concise and accurate.
7. Translate all text segments in the same order they appear.
8. In your response, separate each translated segment with a blank line.

Here are the texts to translate:

${combinedText}
`.trim();

	try {
		const response = await fetch(
			`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:generateContent?key=${apiKey}`,
			{
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					contents: [
						{
							parts: [
								{
									text: batchPrompt,
								},
							],
						},
					],
					generationConfig: {
						temperature: 0.2,
						topK: 40,
						topP: 0.95,
						maxOutputTokens: 128000,
					},
				}),
			}
		);

		if (!response.ok) {
			const errorData = await response.json();
			throw new Error(
				`Gemini API error: ${
					errorData.error?.message || response.statusText
				}`
			);
		}
		const data = await response.json();

		if (!data.candidates || data.candidates.length === 0) {
			throw new Error("No translation generated");
		}

		// Extract text from the response (format may vary between gemini-pro and gemini-2.0-flash)
		const translatedText =
			data.candidates[0].content?.parts?.[0]?.text ||
			data.candidates[0]?.parts?.[0]?.text ||
			"";

		if (!translatedText) {
			throw new Error("Translation response was empty");
		}

		return translatedText;
	} catch (error) {
		console.error("Translation API error:", error);
		throw error;
	}
}

// Function to parse the batch translation response
function parseTranslations(batchResponse, expectedCount) {
	const translationMap = new Map();
	
	// Regular expression to extract indexed translations
	// Matches patterns like [0]translated text[/0], [1]another text[/1]
	const regex = /\[(\d+)\]([\s\S]*?)\[\/\1\]/g;
	let match;
	
	while ((match = regex.exec(batchResponse)) !== null) {
		// match[1] is the index, match[2] is the translated text
		translationMap.set(match[1], match[2].trim());
	}
	
	// If we didn't extract any translations with tags, try a fallback approach
	if (translationMap.size === 0 && expectedCount === 1) {
		// If there's only one text expected, use the whole response
		translationMap.set("0", batchResponse.trim());
	}
	
	return translationMap;
}

// Legacy function for single translations (kept for compatibility)
async function translateWithGemini(
	text,
	targetLanguage,
	promptTemplate,
	apiKey
) {
	// Language map for template substitution
	const languageMap = {
		es: "Spanish",
		fr: "French",
		de: "German",
		it: "Italian",
		pt: "Portuguese",
		ru: "Russian",
		ja: "Japanese",
		ko: "Korean",
		zh: "Chinese",
		ar: "Arabic",
	};

	const languageName = languageMap[targetLanguage] || targetLanguage;
	const prompt = promptTemplate.replace("{language}", languageName);
	try {
		const response = await fetch(
			`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:generateContent?key=${apiKey}`,
			{
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					contents: [
						{
							parts: [
								{
									text: `${prompt}\n\n${text}`,
								},
							],
						},
					],
					generationConfig: {
						temperature: 0.2,
						topK: 40,
						topP: 0.95,
						maxOutputTokens: 128000,
					},
				}),
			}
		);

		if (!response.ok) {
			const errorData = await response.json();
			throw new Error(
				`Gemini API error: ${
					errorData.error?.message || response.statusText
				}`
			);
		}
		const data = await response.json();

		if (!data.candidates || data.candidates.length === 0) {
			throw new Error("No translation generated");
		}

		// Extract text from the response (format may vary between gemini-pro and gemini-2.0-flash)
		const translatedText =
			data.candidates[0].content?.parts?.[0]?.text ||
			data.candidates[0]?.parts?.[0]?.text ||
			"";

		if (!translatedText) {
			throw new Error("Translation response was empty");
		}

		return translatedText;
	} catch (error) {
		console.error("Translation API error:", error);
		throw error;
	}
}
